#Область ПрограммныйИнтерфейс
// Данные для формирования графа.
// 
// Параметры:
//  ПараметрыФормирования  - Структура -  см. функцию "ПараметрыФормированияГрафа"
// Возвращаемое значение:
//  Структура - Данные для формирования графа:
// * Узлы - ДеревоЗначений -  содержащее узлы графа, состав колонок идентичен "ОписаниеУзлов" в ПараметрыФормированияГрафа
// * Ребра - ТаблицаЗначений -  с описание всех ребер, состав колонок идентичен "ОписаниеРебер" в ПараметрыФормированияГрафа
Функция ДанныеДляФормированияГрафа(ПараметрыФормирования) Экспорт
	ПараметрыФормирования.Вставить("СхемаКомпоновкиДанных", Новый СхемаКомпоновкиДанных);
	ПараметрыФормирования.Вставить("ИдентификаторыВсехСтрок", Новый Соответствие);
	
	ОписатьПараметрыДанныхСКД(ПараметрыФормирования);
	ОписатьИсточникДанныхСКД(ПараметрыФормирования);
	ОписатьВычисляемыеПоляСКД(ПараметрыФормирования);
	
	ОписатьСтруктуруСКД(ПараметрыФормирования);
	УстановитьПараметрыСКД(ПараметрыФормирования);
	
	РезультатВОбщейТаблице = РезультатКомпоновкиСКД(ПараметрыФормирования);
	РезультатВРазныхТаблицах = ДанныеРезультата(ПараметрыФормирования, РезультатВОбщейТаблице);
	
	//@skip-check constructor-function-return-section
	Возврат РезультатВРазныхТаблицах;
КонецФункции

// Параметры формирования графа.
// 
// Возвращаемое значение:
//  Структура - Структура с пустыми значениями параметров:
Функция ПараметрыФормированияГрафа() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗапроса"); //  Строка с текстом запроса 
	Результат.Вставить("ПараметрыЗапроса"); //  массив  структур: "Имя", "Значение"
	Результат.Вставить("ОписаниеУзлов"); //  Дерево значений
	Результат.Вставить("ОписаниеРебер"); //  Таблица значений
	//@skip-check constructor-function-return-section
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОписатьПараметрыДанныхСКД(ПараметрыФормирования)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	ПараметрыЗапроса = ПараметрыФормирования.ПараметрыЗапроса;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить(); 
		НовыйПараметр.Имя = Параметр.Имя;
	КонецЦикла;
КонецПроцедуры

Процедура ОписатьИсточникДанныхСКД(ПараметрыФормирования)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	ТекстЗапроса = ПараметрыФормирования.ТекстЗапроса;
	 
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local"; 
	
	ТекущийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	ТекущийНаборДанных.Имя                          = "ОсновнойНабор";
	ТекущийНаборДанных.Запрос                       = ТекстЗапроса;
	ТекущийНаборДанных.ИсточникДанных               = "ИсточникДанных1";
	ТекущийНаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
КонецПроцедуры

Процедура ОписатьВычисляемыеПоляСКД(ПараметрыФормирования)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
	ВычисляемоеПоле.ПутьКДанным = "ЭтоОписаниеСвязи";
	ВычисляемоеПоле.Выражение = "Истина";
КонецПроцедуры

Процедура ОписатьСтруктуруСКД(ПараметрыФормирования)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ТекущаяСтруктураСКД = НастройкиКомпоновки.Структура;
	Узлы = ПараметрыФормирования.ОписаниеУзлов;
	ДобавитьСКДТекущийУровеньДерева(ПараметрыФормирования, Узлы, ТекущаяСтруктураСКД);
	ДобавитьСвязиВСКД(ПараметрыФормирования, ТекущаяСтруктураСКД);
КонецПроцедуры

Процедура УстановитьПараметрыСКД(ПараметрыФормирования)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ПараметрыЗапроса = ПараметрыФормирования.ПараметрыЗапроса;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		НоваяСтрока = НастройкиКомпоновки.ПараметрыДанных.Элементы.Добавить();
		НоваяСтрока.Параметр = Новый ПараметрКомпоновкиДанных(Параметр.Имя);
		НоваяСтрока.Значение = Параметр.Значение;
		НоваяСтрока.Использование = Истина;
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновки, Параметр.Имя, Параметр.Значение);
	КонецЦикла;
КонецПроцедуры

Функция РезультатКомпоновкиСКД(ПараметрыФормирования)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
						НастройкиКомпоновки, , ,
						Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат Результат;
КонецФункции

Процедура ДобавитьСКДТекущийУровеньДерева(ПараметрыФормирования, ТекущийУровень, ТекущаяСтруктураСКД)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	ИдентификаторыВсехСтрок = ПараметрыФормирования.ИдентификаторыВсехСтрок;
	СтрокиДерева = ТекущийУровень.Строки;
	Для каждого Строка Из  СтрокиДерева Цикл
		ГруппировкаКомпоновкиДанных = ТекущаяСтруктураСКД.Добавить(Тип("ГруппировкаКомпоновкиДанных"));	
		ГруппировкаКомпоновкиДанных.Использование = Истина;
		
		НовоеПолеГруппировкиСКД(ГруппировкаКомпоновкиДанных, Строка.ИдентификаторУзла);
		ИмяПоля = ИмяПоляСИдентификаторомГруппировки(Строка.ИдентификаторСтроки);
		НовоеПолеГруппировкиСКД(ГруппировкаКомпоновкиДанных, ИмяПоля);
		ДобавитьВычисляемоеПолеИдентификаторГруппировкиСКД(СхемаКомпоновкиДанных, Строка.ИдентификаторСтроки);
		
		АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоВыбранноеПолеКомпоновкиДанных.Использование = Истина;
		
		ИдентификаторыВсехСтрок.Вставить(Строка.ИдентификаторСтроки, Строка);
		
		Если Строка.Строки.Количество() > 0 Тогда
			ДобавитьСКДТекущийУровеньДерева(ПараметрыФормирования, Строка, ГруппировкаКомпоновкиДанных.Структура)
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура ДобавитьСвязиВСКД(ПараметрыФормирования, ТекущаяСтруктураСКД)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	ИдентификаторыВсехСтрок = ПараметрыФормирования.ИдентификаторыВсехСтрок;
	ОписаниеРебер = ПараметрыФормирования.ОписаниеРебер;
	
	Для Каждого Строка Из ОписаниеРебер Цикл
		ГруппировкаКомпоновкиДанных = ТекущаяСтруктураСКД.Добавить(Тип("ГруппировкаКомпоновкиДанных"));	
		ГруппировкаКомпоновкиДанных.Использование = Истина;
		
		НовоеПолеГруппировкиСКД(ГруппировкаКомпоновкиДанных, Строка.ИдентификаторИсточника);
		НовоеПолеГруппировкиСКД(ГруппировкаКомпоновкиДанных, Строка.ИдентификаторПриемника);
		НовоеПолеГруппировкиСКД(ГруппировкаКомпоновкиДанных, "ЭтоОписаниеСвязи");
		ИмяПоля = ИмяПоляСИдентификаторомГруппировки(Строка.ИдентификаторСтроки);
		НовоеПолеГруппировкиСКД(ГруппировкаКомпоновкиДанных, ИмяПоля);
		ДобавитьВычисляемоеПолеИдентификаторГруппировкиСКД(СхемаКомпоновкиДанных, Строка.ИдентификаторСтроки);
		
		АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоВыбранноеПолеКомпоновкиДанных.Использование = Истина;
		
		ИдентификаторыВсехСтрок.Вставить(Строка.ИдентификаторСтроки, Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВычисляемоеПолеИдентификаторГруппировкиСКД(СхемаКомпоновкиДанных, ИдентификаторСтроки)
	ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
	ВычисляемоеПоле.ПутьКДанным = ИмяПоляСИдентификаторомГруппировки(ИдентификаторСтроки);
	ВычисляемоеПоле.Выражение = "Истина";
КонецПроцедуры

Функция НовоеПолеГруппировкиСКД(ГруппировкаКомпоновкиДанных, ИмяПоля)
	ПолеГруппировкиКомпоновкиДанных = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировкиКомпоновкиДанных.Использование = Истина;
	ПолеГруппировкиКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Возврат ПолеГруппировкиКомпоновкиДанных;
КонецФункции

Функция ИмяПоляСИдентификаторомГруппировки(ИдентификаторСтроки)
	Возврат "ЭтоГруппировка" + СтрЗаменить(ИдентификаторСтроки, "-", "_");
КонецФункции

Функция ИдентификаторСтрокиИзИмениПоля(ИмяПоля)
	ТолькоГуид = СтрЗаменить(ИмяПоля, "ЭтоГруппировка", "");
	Возврат  СтрЗаменить(ТолькоГуид, "_", "-");
КонецФункции

Функция ДанныеРезультата(ПараметрыФормирования, РезультатКомпоновкиСКД)
	Результат = Новый Структура;
	Узлы = ПараметрыФормирования.ОписаниеУзлов.Скопировать();
	Узлы.Строки.Очистить();
	Результат.Вставить("Узлы", Узлы);
	 
	Ребра = ПараметрыФормирования.ОписаниеРебер.Скопировать();
	Ребра.Очистить();
	Результат.Вставить("Ребра", Ребра);

	Результат.Вставить("ТекущийУровеньУзлов", Узлы.Строки); // служебная для отслеживания уровня вставки узлов
		
	УровеньСКД = РезультатКомпоновкиСКД.Строки;
	ЗаполнитьРекурсивноУзлыИРебра(ПараметрыФормирования, УровеньСКД, Результат);
	
	Результат.Удалить("ТекущийУровеньУзлов");
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьРекурсивноУзлыИРебра(ПараметрыФормирования, ТекУровеньСКД, ДанныеРезультата)
	Для Каждого Строка Из ТекУровеньСКД Цикл
		Если Строка.ЭтоОписаниеСвязи = Истина Тогда
			ДобавитьСвязь(ПараметрыФормирования, Строка, ДанныеРезультата);
		Иначе
			НовыйУзел = НовыйУзел(ПараметрыФормирования, Строка, ДанныеРезультата);
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			НовыйУровеньСКД = Строка.Строки;
			НовыйУровеньУзлов = НовыйУзел.Строки;
			ДанныеРезультата.ТекущийУровеньУзлов = НовыйУровеньУзлов;
			ЗаполнитьРекурсивноУзлыИРебра(ПараметрыФормирования, НовыйУровеньСКД, ДанныеРезультата);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьСвязь(ПараметрыФормирования, Строка, ДанныеРезультата)
	ИдентификаторыВсехСтрок = ПараметрыФормирования.ИдентификаторыВсехСтрок;
	Ребра = ДанныеРезультата.Ребра;
	НоваяСтрока = Ребра.Добавить();
	НайденныйИдентификаторГруппировки = НайденныйИдентификаторГруппировки(ПараметрыФормирования, Строка);
	СтрокаСвязи = ИдентификаторыВсехСтрок.Получить(НайденныйИдентификаторГруппировки);
	НоваяСтрока.ИдентификаторИсточника = Строка[СтрокаСвязи.ИдентификаторИсточника];
	НоваяСтрока.ИдентификаторПриемника = Строка[СтрокаСвязи.ИдентификаторПриемника];
	НоваяСтрока.Оформление = СтрокаСвязи.Оформление;
КонецПроцедуры

Функция НайденныйИдентификаторГруппировки(ПараметрыФормирования, Строка)
	СхемаКомпоновкиДанных = ПараметрыФормирования.СхемаКомпоновкиДанных;
	ПолеГруппировки = Неопределено;
	Для Каждого поле из СхемаКомпоновкиДанных.ВычисляемыеПоля Цикл
		Если Поле.ПутьКДанным = "ЭтоОписаниеСвязи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Строка[Поле.ПутьКДанным] = Истина Тогда
			ПолеГруппировки = Поле.ПутьКДанным;
		КонецЕсли;
	КонецЦикла;
	Возврат ИдентификаторСтрокиИзИмениПоля(ПолеГруппировки);
КонецФункции

Функция НовыйУзел(ПараметрыФормирования, Строка, ДанныеРезультата) 
	ТекущийУровеньУзлов = ДанныеРезультата.ТекущийУровеньУзлов;
	ИдентификаторыВсехСтрок = ПараметрыФормирования.ИдентификаторыВсехСтрок;
	НоваяСтрока = ТекущийУровеньУзлов.Добавить();
	НайденныйИдентификаторГруппировки = НайденныйИдентификаторГруппировки(ПараметрыФормирования, Строка);
	СтрокаГруппировки = ИдентификаторыВсехСтрок.Получить(НайденныйИдентификаторГруппировки);
	НоваяСтрока.ИдентификаторУзла = Строка[СтрокаГруппировки.ИдентификаторУзла];
	НоваяСтрока.Оформление = СтрокаГруппировки.Оформление;
	Возврат НоваяСтрока;
КонецФункции

#КонецОбласти
