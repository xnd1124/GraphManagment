#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

// Помещает во временное хранилище схему компоновки данных,
// настройки компоновки данных и возвращает их адреса.
//
// Параметры:
//	ЭлементИсточникДанных - СправочникСсылка.граф_ИсточникиДанныхГрафов, ДанныеФормыСтруктура - объект формы:
//			*Ссылка - СправочникСсылка.граф_ИсточникиДанныхГрафов - 
//
// Возвращаемое значение:
//	Структура - структура, содержащая адреса:
//		*СхемаКомпоновкиДанных - Строка - адрес схемы компоновки данных
//		*НастройкиКомпоновкиДанных - Строка - адрес настроек компоновки данных.
//
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементИсточникДанных) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	Если ТипЗнч(ЭлементИсточникДанных) = Тип("СправочникСсылка.граф_ИсточникиДанныхГрафов") Тогда
		ЭлементИсточникДанныхСсылка = ЭлементИсточникДанных;
	Иначе
		ЭлементИсточникДанныхСсылка = ЭлементИсточникДанных.Ссылка;
	КонецЕсли;
	
	// Получим схему компоновки данных
	//@skip-check reading-attribute-from-database
	Если ЗначениеЗаполнено(ЭлементИсточникДанных.ИмяШаблонаСКД)
		ИЛИ ЭлементИсточникДанныхСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхГрафаПоИмениМакета(ЭлементИсточникДанныхСсылка,
				ЭлементИсточникДанных.ИмяШаблонаСКД);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЭлементИсточникДанныхСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено И ПустаяСтрока(ЭлементИсточникДанных.ИмяШаблонаСКД) Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхема");
	ИначеЕсли СхемаКомпоновкиДанных = Неопределено
		И Не ПустаяСтрока(ЭлементИсточникДанных.ИмяШаблонаСКД) Тогда
		
		СхемаКомпоновкиДанных = ПолучитьМакет(ЭлементИсточникДанных.ИмяШаблонаСКД);
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	//@skip-check reading-attribute-from-database
	Настройки = ЭлементИсточникДанныхСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Адреса;
	
КонецФункции

// Функция возвращает структуру с синонимом и схемой компоновки данных по имени макета.
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.граф_ИсточникиДанныхГрафов - источник данных, для которого требуется получить схему
//	ИмяМакета - Строка, Неопределено - имя получаемого макета схемы компоновки данных.
//
// Возвращаемое значение:
//	Структура - структура со свойствами:
//		*Описание - Строка - синоним получаемого макета.
//		*СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Неопределено - найденная схема компоновки данных.
//		*НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных, Неопределено - найденные настройки компоновки данных.
//
Функция ОписаниеИСхемаКомпоновкиДанныхГрафаПоИмениМакета(ЦельСсылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание", "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	граф_ИсточникиДанныхГрафов.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	граф_ИсточникиДанныхГрафов.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных 
	|ИЗ
	|	Справочник.граф_ИсточникиДанныхГрафов КАК граф_ИсточникиДанныхГрафов
	|ГДЕ
	|	граф_ИсточникиДанныхГрафов.Ссылка = &ЦельСсылка";
	
	Запрос.УстановитьПараметр("ЦельСсылка", ЦельСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			ХранилищеСхемыКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных; // ХранилищеЗначения
			ХранилищеНастроекКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных; // ХранилищеЗначения
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	Иначе
		
		Макет = Метаданные.НайтиПоТипу(ТипЗнч(ЦельСсылка)).Макеты.Найти(ИмяМакета);
		Если НЕ Макет = Неопределено Тогда
			ВозвращаемоеЗначение.Описание = Макет.Синоним;
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = ПолучитьМакет(ИмяМакета);
			Если Выборка.Следующий() Тогда
				ХранилищеНастроекКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных; // ХранилищеЗначения
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
#КонецОбласти

	
	
#Область СлужебныеПроцедурыИФункции
Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	Шаблоны = Новый Массив;
	Для Каждого Макет Из Метаданные.Справочники.граф_ИсточникиДанныхГрафов.Макеты Цикл

		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			Продолжить;
		КонецЕсли;
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
	КонецЦикла;
	Возврат Шаблоны;

КонецФункции
#КонецОбласти
#КонецЕсли