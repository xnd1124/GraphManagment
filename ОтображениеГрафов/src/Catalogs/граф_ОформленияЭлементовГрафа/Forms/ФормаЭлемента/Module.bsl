#Область ОписаниеПеременных
&НаКлиенте
Перем EditorJSON;
#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗакешироватьДанныеССервера();
	JSONHTML = УстановитьJSONEditor();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	граф_БиблиотекаG6Клиент.ПроверитьиУстановитьБиблиотеку();
	СформироватьКодДляПросмотраЭлемента();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура КодПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Объект.Код;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура JSONHTMLДокументСформирован(Элемент)
	EditorJSON = Элементы.JSONHTML.Документ.defaultView.Init();
	ТекстВСкобках = граф_РаботаСТекстомКлиентСервер.ТекстСоСкобками(Объект.ОписаниеJSON);
	EditorJSON.setText(ТекстВСкобках);
	ТекущийЭлемент = Элементы.JSONHTML;
	EditorJSON.focus();
КонецПроцедуры


&НаКлиенте
Процедура ТипОформленияПриИзменении(Элемент)
	ТипОформленияПриИзмененииНаСервере();
	СформироватьКодДляПросмотраЭлемента();
КонецПроцедуры

&НаКлиенте
Процедура JSONHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если Не ПолучитьЗначениеКоллекции(ДанныеСобытия, "Button.id") = "onChange" Тогда
		Возврат;
	КонецЕсли;

	ТекстСоСкобками = editorJSON.getText();
	Объект.ОписаниеJSON = граф_РаботаСТекстомКлиентСервер.СодержимоеВнутриСкобок(ТекстСоСкобками);
	СформироватьКодДляПросмотраЭлемента();
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗакешироватьДанныеССервера()
	КешированныйШаблонТекстаСтраницы = граф_МакетыВызовСервера.ТекстМакета("граф_ШаблонHTML");
	КешированныйСкриптИнициализации = граф_МакетыВызовСервера.ТекстМакета("граф_СкриптИнициализацииГрафа");
	КешированныйТекстТипаОформления = Справочники.граф_ТипыОформленийЭлементовГрафов.ОписаниеТипа(Объект.ТипОформления);
КонецПроцедуры

&НаСервере
Функция УстановитьJSONEditor()
	РабочийКаталог = КаталогПрограммы();
	КаталогКомпоненты = "JSONEditor";
	КаталогНаДиске = Новый Файл(РабочийКаталог + КаталогКомпоненты);
	Если Не КаталогНаДиске.Существует() Тогда
		Чтение = Новый ЧтениеДанных(Справочники.граф_ОформленияЭлементовГрафа.ПолучитьМакет("JSONEditor"));
		Файл = Новый ЧтениеZipФайла(Чтение.ИсходныйПоток());
		Файл.ИзвлечьВсе(РабочийКаталог + КаталогКомпоненты);
	КонецЕсли;
	Возврат РабочийКаталог + КаталогКомпоненты + "\index.html";
КонецФункции

&НаКлиенте
Процедура СформироватьКодДляПросмотраЭлемента()
	БиблиотекаG6 = граф_БиблиотекаG6Клиент.ТекстПодключенияВHTML();
	ШаблонТекстаСтраницы = СтрЗаменить(КешированныйШаблонТекстаСтраницы,
			"// библиотека G6",	БиблиотекаG6);	
	ШаблонТекстаСтраницы = СтрЗаменить(ШаблонТекстаСтраницы, "//инициализация графа", КешированныйСкриптИнициализации);
	
	СвойстваОбъекта = Объект.ОписаниеJSON;
	Если СвойстваОбъекта <> "" Тогда
		СвойстваОбъекта  = СвойстваОбъекта  + ",";
	КонецЕсли;
	
	ОписаниеОбъекта = СтрЗаменить(КешированныйТекстТипаОформления, "//свойства объекта", СвойстваОбъекта);
	
	ШаблонТекстаСтраницы = СтрЗаменить(ШаблонТекстаСтраницы, "//данные графа", ОписаниеОбъекта);
	ВнешнийВид = ШаблонТекстаСтраницы;
КонецПроцедуры


&НаКлиенте
Функция ПолучитьЗначениеКоллекции(Знач Коллекция, Знач ИмяСвойства, ЗначениеПоУмолчанию = Неопределено,
	МягкийРежим = Истина)

	ЭтоПримитивныеТипы = (ТипЗнч(Коллекция) = Тип("Число") Или ТипЗнч(Коллекция) = Тип("Строка") Или ТипЗнч(Коллекция)
		= Тип("Булево") Или ТипЗнч(Коллекция) = Тип("Дата"));
	Если ЭтоПримитивныеТипы Тогда
		Если МягкийРежим И ЗначениеЗаполнено(Коллекция) Тогда
			Возврат Коллекция;
		Иначе
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	Результат = ПолучитьКоллекциюПоСвойству(Коллекция, ИмяСвойства, ЗначениеПоУмолчанию);
	Возврат ПолучитьЗначениеКоллекцииБезВложенности(Результат.Коллекция, Результат.ИмяСвойства, ЗначениеПоУмолчанию);

КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеКоллекцииБезВложенности(Знач Коллекция, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	ТипКоллекции = ТипЗнч(Коллекция);
	ЭтоСтруктурныйТипСоСвойством = (ТипКоллекции = Тип("Структура") Или ТипКоллекции = Тип("ФиксированнаяСтруктура")
		Или ТипКоллекции = Тип("ДанныеФормыЭлементДерева")) И ЗначениеЗаполнено(ИмяСвойства) И Коллекция.Свойство(
		ИмяСвойства);
	Если ЭтоСтруктурныйТипСоСвойством Тогда
		Возврат Коллекция[ИмяСвойства];
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ВнешнийОбъект") Тогда
		Попытка
			Возврат Коллекция[ИмяСвойства];
		Исключение
			Возврат ЗначениеПоУмолчанию;
		КонецПопытки;
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Соответствие") Тогда
		Возврат Коллекция.Получить(ИмяСвойства);
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьКоллекциюПоСвойству(Коллекция, Знач ИмяСвойства, ЗначениеПоУмолчанию = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Коллекция", Коллекция);
	Результат.Вставить("ИмяСвойства", ИмяСвойства);

	Если Не ТипЗнч(ИмяСвойства) = Тип("Строка") Тогда
		Возврат Результат;
	КонецЕсли;

	МассивСвойств = СтрРазделить(ИмяСвойства, ".");

	Если МассивСвойств.Количество() = 1 Тогда
		Возврат Результат;
	КонецЕсли;

	Для Ном = 0 По МассивСвойств.Количество() - 2 Цикл
		Результат.Вставить("Коллекция", ПолучитьЗначениеКоллекцииБезВложенности(Результат.Коллекция, СокрЛП(
			МассивСвойств[Ном]), ЗначениеПоУмолчанию));
	КонецЦикла;

	Результат.Вставить("ИмяСвойства", СокрЛП(МассивСвойств[Ном]));

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ТипОформленияПриИзмененииНаСервере()
	КешированныйТекстТипаОформления = Справочники.граф_ТипыОформленийЭлементовГрафов.ОписаниеТипа(Объект.ТипОформления);
КонецПроцедуры

#КонецОбласти

