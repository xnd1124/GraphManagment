
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДоступныеПоляЗапроса();
	ВосстановитьТабличныеЧасти();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Узлы.Очистить();
	ПреобразоватьУзлыДляЗаписи(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	граф_БиблиотекаG6Клиент.ПроверитьиУстановитьБиблиотеку();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУзлы
&НаКлиенте
Процедура УзлыИдентификаторУзлаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УзлыЗаголовокУзлаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УзлыОформлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокТипов = Новый СписокЗначений;
	ДопПараметры = Новый Структура;
	ТекущиеДанные = Элементы.Узлы.ТекущиеДанные;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		ДопПараметры.Вставить("ТипОформления", ПредопределенноеЗначение("Перечисление.граф_КомпонентыГрафа.Контейнер"));
	Иначе
		ДопПараметры.Вставить("ТипОформления", ПредопределенноеЗначение("Перечисление.граф_КомпонентыГрафа.Вершина"));
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораТипаОформления", ЭтотОбъект, ДопПараметры);	
	СписокТипов.Добавить("Элемент оформления");
	СписокТипов.Добавить("Поле данных, содержащее имя элемента оформления");
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выбор источника данных");
КонецПроцедуры

&НаКлиенте
Процедура УзлыИдентификаторУзлаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Узлы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗаголовокУзла) Тогда
		ТекущиеДанные.ЗаголовокУзла = ТекущиеДанные.ИдентификаторУзла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УзлыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРебра

&НаКлиенте
Процедура РебраИдентификаторИсточникаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РебраИдентификаторПриемникаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РебраЗаголовокРебраНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РебраНаправлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РебраПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РебраОформлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокТипов = Новый СписокЗначений;
	ДопПараметры = Новый Структура;
	ТекущиеДанные = Элементы.Ребра.ТекущиеДанные;
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("ТипОформления", ПредопределенноеЗначение("Перечисление.граф_КомпонентыГрафа.Ребро"));
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораТипаОформления", ЭтотОбъект, ДопПараметры);	
	СписокТипов.Добавить("Элемент оформления");
	СписокТипов.Добавить("Поле данных, содержащее имя элемента оформления");
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выбор источника данных");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура СформироватьГраф(Команда)
	ПараметрыВыводаГрафа = ПараметрыВыводаГрафа();
	СформироватьГрафНаСервере(ПараметрыВыводаГрафа);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьДоступныеПоляЗапроса()
	ДоступныеПоляЗапроса.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		Возврат;
	КонецЕсли;	
	ТекстЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ТекстЗапроса");
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);   
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0]; 
	Колонки = пакетЗапросов.Колонки; 
	
	Для каждого Колонка Из Колонки Цикл
	 ДоступныеПоляЗапроса.Добавить(Колонка.Псевдоним, Колонка.Псевдоним);
	КонецЦикла;
	
	ДоступныеПоляЗапроса.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;                                                                     
	ДанныеВыбора = ДоступныеПоляЗапроса.Скопировать(); 
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьУзлыДляЗаписи(ТекущийОбъект)
	ПреобразоватьУзлыТекущегоУровня(Узлы, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьУзлыТекущегоУровня(ТекущийУзел, ТекущийОбъект, ИдентификаторРодителя = Неопределено)
	Строки = ТекущийУзел.ПолучитьЭлементы();
	Для каждого Строка из Строки Цикл
		НоваяСтрока = ТекущийОбъект.Узлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		НоваяСтрока.СтрокаРодитель = ИдентификаторРодителя;
		Если Строка.ПолучитьЭлементы().Количество() > 0 Тогда
			ПреобразоватьУзлыТекущегоУровня(Строка, ТекущийОбъект, НоваяСтрока.ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТабличныеЧасти()
	УзлыВВидеДерева = Справочники.граф_ОписанияГрафов.УзлыВВидеДерева(Объект.Ссылка);
	ЗначениеВРеквизитФормы(УзлыВВидеДерева, "Узлы");
КонецПроцедуры

&НаСервере
Процедура СформироватьГрафНаСервере(ПараметрыВыводаГрафа)
	ПараметрыФормирования = граф_ФормированиеГрафа.ПараметрыФормированияГрафа(); 
	ЗаполнитьПараметрыФормирования(ПараметрыФормирования);
	ДанныеДляГрафа = граф_ФормированиеГрафа.ДанныеДляФормированияГрафа(ПараметрыФормирования);
	ЗаполнитьУзлыИРебраФормы(ДанныеДляГрафа);
	ИсходныйКодГрафаHTML = граф_ФормированиеГрафа.ИсходныйКодГрафаHTML(ДанныеДляГрафа, ПараметрыФормирования, ПараметрыВыводаГрафа);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУзлыИРебраФормы(ДанныеДляГрафа)
	РезультатСКДУзлы.ПолучитьЭлементы().Очистить();
	РезультатСКДРебра.Очистить();
	ЗначениеВРеквизитФормы(ДанныеДляГрафа.Узлы, "РезультатСКДУзлы");
	РезультатСКДРебра.Загрузить(ДанныеДляГрафа.Ребра);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормирования(ПараметрыФормирования)
	ЗаполнитьТекстЗапроса(ПараметрыФормирования);
	ЗаполнитьПараметрыЗапроса(ПараметрыФормирования);
	ЗаполнитьПоляРесурсы(ПараметрыФормирования);
	ЗаполнитьОписаниеУзлов(ПараметрыФормирования);
	ЗаполнитьОписаниеРебер(ПараметрыФормирования);
	ЗаполнитьПрочиеНастройки(ПараметрыФормирования);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеРебер(ПараметрыФормирования)
	ОписаниеРебер = Объект.Ребра.Выгрузить();
	ПараметрыФормирования.Вставить("ОписаниеРебер", ОписаниеРебер)	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеУзлов(ПараметрыФормирования)
	ОписаниеУзлов = РеквизитФормыВЗначение("Узлы");
	ПараметрыФормирования.Вставить("ОписаниеУзлов", ОписаниеУзлов)	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТекстЗапроса(ПараметрыФормирования)
	ТекстЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ТекстЗапроса");
	ПараметрыФормирования.Вставить("ТекстЗапроса", ТекстЗапроса)	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЗапроса(ПараметрыФормирования)
	//@skip-check reading-attribute-from-database
	ПараметрыЗапроса = Объект.Владелец.ПараметрыЗапроса;
	ПараметрыФормирования.Вставить("ПараметрыЗапроса", Новый Массив);
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		НовыйПараметр = Новый Структура("Имя, Значение");
		НовыйПараметр.Имя = Параметр.Имя;
		НовыйПараметр.Значение = ЗначениеИзСтрокиВнутр(Параметр.Значение);
		ПараметрыФормирования.ПараметрыЗапроса.Добавить(НовыйПараметр);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляРесурсы(ПараметрыФормирования)
	//@skip-check reading-attribute-from-database
	ПоляРесурсы = Объект.Владелец.ПоляРесурсы;
	ПараметрыФормирования.Вставить("ПоляРесурсы", Новый Массив);
	Для Каждого ПолеРесурса Из ПоляРесурсы Цикл
		НовыйРесурс = Новый Структура("Поле, АгрегирующаяФункция");
		НовыйРесурс.Поле = ПолеРесурса.ИмяПоля;
		НовыйРесурс.АгрегирующаяФункция = ПолеРесурса.АгрегирующаяФункция;
		ПараметрыФормирования.ПоляРесурсы.Добавить(НовыйРесурс);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрочиеНастройки(ПараметрыФормирования)
	Настройки = Новый Структура;
	Настройки.Вставить("ОптимизироватьСвязи", Объект.ОптимизироватьСвязи);
	ПараметрыФормирования.Вставить("ПрочиеНастройки", Настройки);	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыводаГрафа()
	Результат = Новый Структура;
	Результат.Вставить("СтрокаПодключенияБиблиотекиG6", граф_БиблиотекаG6Клиент.ТекстПодключенияВHTML());	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораТипаОформления(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатВыбора.Значение = "Элемент оформления" Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораОформления", ЭтотОбъект, ДополнительныеПараметры);
		ЗначениеОтбора = Новый Структура("Компонент",ДополнительныеПараметры.ТипОформления);
		ПараметрыОтбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.граф_ОформленияЭлементовГрафа.ФормаВыбора", ПараметрыОтбора, ЭтотОбъект, , , , Оповещение);
	Иначе
		ПоказатьВыборПолейОтчета(ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОформления(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ТекущиеДанные.Оформление = РезультатВыбора;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборПолейОтчета(ДополнительныеПараметры)
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораОформления", ЭтотОбъект, ДополнительныеПараметры);
	СписокПолей = Новый СписокЗначений; 
	Для Каждого Поле Из ДоступныеПоляЗапроса  Цикл
		СписокПолей.Добавить(Поле.Значение);	
	КонецЦикла;	
	СписокПолей.ПоказатьВыборЭлемента(Оповещение, "Выбор поля запроса");
КонецПроцедуры

#КонецОбласти
