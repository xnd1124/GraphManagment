#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДоступныеПоляЗапроса();
	ВосстановитьТабличныеЧасти();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Узлы.Очистить();
	ПреобразоватьУзлыДляЗаписи(ТекущийОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыУзлы
&НаКлиенте
Процедура УзлыИдентификаторУзлаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРебра

&НаКлиенте
Процедура РебраИдентификаторИсточникаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РебраИдентификаторПриемникаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка);
КонецПроцедуры


&НаКлиенте
Процедура РебраПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор();
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура СформироватьГраф(Команда)
	СформироватьГрафНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьДоступныеПоляЗапроса()
	ДоступныеПоляЗапроса.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		Возврат;
	КонецЕсли;	
	ТекстЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ТекстЗапроса");
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);   
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0]; 
	Колонки = пакетЗапросов.Колонки; 
	
	Для каждого Колонка Из Колонки Цикл
	 ДоступныеПоляЗапроса.Добавить(Колонка.Псевдоним, Колонка.Псевдоним);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораПоляЗапроса(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;                                                                     
	ДанныеВыбора = ДоступныеПоляЗапроса.Скопировать(); 
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьУзлыДляЗаписи(ТекущийОбъект)
	ПреобразоватьУзлыТекущегоУровня(Узлы, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьУзлыТекущегоУровня(ТекущийУзел, ТекущийОбъект, ИдентификаторРодителя = Неопределено)
	Строки = ТекущийУзел.ПолучитьЭлементы();
	Для каждого Строка из Строки Цикл
		НоваяСтрока = ТекущийОбъект.Узлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		НоваяСтрока.СтрокаРодитель = ИдентификаторРодителя;
		Если Строка.ПолучитьЭлементы().Количество() > 0 Тогда
			ПреобразоватьУзлыТекущегоУровня(Строка, ТекущийОбъект, НоваяСтрока.ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТабличныеЧасти()
	ВосстановитьУзлы();
КонецПроцедуры

&НаСервере
Процедура ВосстановитьУзлы()
	УзлыПоУровням = УзлыПоУровням();
	ДобавленныеСтроки = Новый Соответствие;
	Для Каждого Узел Из УзлыПоУровням Цикл
		Родитель = ДобавленныеСтроки.Получить(Узел.СтрокаРодитель);
		Если Родитель = Неопределено Тогда
			Родитель = Узлы;
		КонецЕсли;
		СтрокиУровня = Родитель.ПолучитьЭлементы();
		НоваяСтрока = СтрокиУровня.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Узел);
		ДобавленныеСтроки.Вставить(Узел.ИдентификаторСтроки, НоваяСтрока);	 
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Функция УзлыПоУровням()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ссылка", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	граф_ОписанияГрафовУзлы.ИдентификаторСтроки КАК Потомок,
	|	граф_ОписанияГрафовУзлы.СтрокаРодитель КАК Предок
	|ПОМЕСТИТЬ вТаблица1
	|ИЗ
	|	Справочник.граф_ОписанияГрафов.Узлы КАК граф_ОписанияГрафовУзлы
	|	ГДЕ граф_ОписанияГрафовУзлы.ССылка = &ССЫЛКА
	|	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	граф_ОписанияГрафовУзлы.ИдентификаторСтроки,
	|	граф_ОписанияГрафовУзлы.ИдентификаторСтроки
	|ИЗ
	|	Справочник.граф_ОписанияГрафов.Узлы КАК граф_ОписанияГрафовУзлы
	|	ГДЕ граф_ОписанияГрафовУзлы.ССылка = &ССЫЛКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Связь1.Предок КАК Предок,
	|	Связь2.Потомок КАК Потомок
	|ПОМЕСТИТЬ вТаблица2
	|ИЗ
	|	вТаблица1 КАК Связь1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вТаблица1 КАК Связь2
	|		ПО Связь1.Потомок = Связь2.Предок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Связь1.Предок КАК Предок,
	|	Связь2.Потомок КАК Потомок
	|ПОМЕСТИТЬ вТаблица3
	|ИЗ
	|	вТаблица2 КАК Связь1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вТаблица2 КАК Связь2
	|		ПО Связь1.Потомок = Связь2.Предок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Связь1.Предок КАК Предок,
	|	Связь2.Потомок КАК Потомок
	|ПОМЕСТИТЬ вТаблица4
	|ИЗ
	|	вТаблица3 КАК Связь1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вТаблица3 КАК Связь2
	|		ПО Связь1.Потомок = Связь2.Предок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Связь1.Предок) КАК Уровень,
	|	Связь2.Потомок КАК Потомок
	|ПОМЕСТИТЬ втУровни
	|ИЗ
	|	вТаблица4 КАК Связь1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вТаблица4 КАК Связь2
	|		ПО Связь1.Потомок = Связь2.Предок
	|ГДЕ
	|	Связь1.Предок <> Связь2.Потомок
	|
	|СГРУППИРОВАТЬ ПО
	|	Связь2.Потомок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	граф_ОписанияГрафовУзлы.Ссылка КАК Ссылка,
	|	граф_ОписанияГрафовУзлы.НомерСтроки КАК НомерСтроки,
	|	граф_ОписанияГрафовУзлы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	граф_ОписанияГрафовУзлы.ИдентификаторУзла КАК ИдентификаторУзла,
	|	граф_ОписанияГрафовУзлы.Оформление КАК Оформление,
	|	граф_ОписанияГрафовУзлы.СвойстваУзла КАК СвойстваУзла,
	|	граф_ОписанияГрафовУзлы.СтрокаРодитель КАК СтрокаРодитель
	|ИЗ
	|	втУровни КАК втУровни
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.граф_ОписанияГрафов.Узлы КАК граф_ОписанияГрафовУзлы
	|		ПО втУровни.Потомок = граф_ОписанияГрафовУзлы.ИдентификаторСтроки
	|		и  граф_ОписанияГрафовУзлы.ССылка = &ССЫЛКА
	|
	|УПОРЯДОЧИТЬ ПО
	|	втУровни.Уровень";
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;
КонецФункции

&НаСервере
Процедура СформироватьГрафНаСервере()
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ОписатьПараметрыДанныхСКД(СхемаКомпоновкиДанных);
	ОписатьИсточникДанныхСКД(СхемаКомпоновкиДанных);
	
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ОписатьСтруктуруСКД(НастройкиКомпоновки);
	УстановитьПараметрыСКД(НастройкиКомпоновки);
	
	РезультатКомпоновкиСКД = РезультатКомпоновкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновки);
	РазобратьРезультатВыполнения(РезультатКомпоновкиСКД);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСКДТекущийУровеньДерева(ТекущийУровень, ТекущаяСтруктураСКД)
	СтрокиДерева = ТекущийУровень.ПолучитьЭлементы();
	Для каждого Строка Из  СтрокиДерева Цикл
		ГруппировкаКомпоновкиДанных = ТекущаяСтруктураСКД.Добавить(Тип("ГруппировкаКомпоновкиДанных"));	
		ГруппировкаКомпоновкиДанных.Использование = Истина;
		ПолеГруппировкиКомпоновкиДанных = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиКомпоновкиДанных.Использование = Истина;
		ПолеГруппировкиКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(Строка.ИдентификаторУзла); 
		
		АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоВыбранноеПолеКомпоновкиДанных.Использование = Истина;
		Если Строка.ПолучитьЭлементы().Количество() > 0 Тогда
			ДобавитьСКДТекущийУровеньДерева(Строка, ГруппировкаКомпоновкиДанных.Структура)
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ОписатьИсточникДанныхСКД(СхемаКомпоновкиДанных)
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local"; 
	
	ТекущийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	ТекущийНаборДанных.Имя                          = "ОсновнойНабор";
	ТекущийНаборДанных.Запрос                       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ТекстЗапроса");
	ТекущийНаборДанных.ИсточникДанных               = "ИсточникДанных1";
	ТекущийНаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
КонецПроцедуры

&НаСервере
Процедура ОписатьСтруктуруСКД(НастройкиКомпоновки)
	ТекущаяСтруктураСКД = НастройкиКомпоновки.Структура;
	ДобавитьСКДТекущийУровеньДерева(Узлы, ТекущаяСтруктураСКД);
КонецПроцедуры

&НаСервере
Функция РезультатКомпоновкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновки)
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
						НастройкиКомпоновки, , ,
						Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьПараметрыСКД(НастройкиКомпоновки)
	//@skip-check reading-attribute-from-database
	ПараметрыЗапроса = Объект.Владелец.ПараметрыЗапроса;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		ИмяПараметра = Параметр.Имя;
		ЗначениеПараметра = ЗначениеИзСтрокиВнутр(Параметр.Значение);
		НоваяСтрока = НастройкиКомпоновки.ПараметрыДанных.Элементы.Добавить();
		НоваяСтрока.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
		НоваяСтрока.Значение= ЗначениеПараметра;
		НоваяСтрока.Использование = Истина;
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновки, ИмяПараметра, ЗначениеПараметра );
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОписатьПараметрыДанныхСКД(СхемаКомпоновкиДанных)
	//@skip-check reading-attribute-from-database
	ПараметрыЗапроса = Объект.Владелец.ПараметрыЗапроса;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить(); 
		НовыйПараметр.Имя = Параметр.Имя;
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура РазобратьРезультатВыполнения(РезультатКомпоновкиСКД)
	//TODO: Реализация
КонецПроцедуры
#КонецОбласти
